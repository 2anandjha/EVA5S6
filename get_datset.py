# -*- coding: utf-8 -*-
"""get_datset.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tFOIHLC-0FJQ0XXeul19fHhv-JmMOjpH
"""

from __future__ import print_function
import torch
import torch.nn.functional as F
from torchvision import datasets, transforms

"""## Data Transformations
We first start with defining our data transformations. We need to think what our data is and how can we augment it to correct represent images which it might not see otherwise. 
"""
def dta_trnsf(dataset):
  if dataset == "MNIST":

   

# Train Phase transformations
    train_transforms = transforms.Compose([
                                        #  transforms.Resize((28, 28)),
                                        #  transforms.ColorJitter(brightness=0.10, contrast=0.1, saturation=0.10, hue=0.1),
                                        transforms.ToTensor(),
                                        transforms.Normalize((0.1307,), (0.3081,)) # The mean and std have to be sequences (e.g., tuples), therefore you should add a comma after the values. 
                                        # Note the difference between (0.1307) and (0.1307,)
                                        ])

  # Test Phase transformations
    test_transforms = transforms.Compose([
                                        #  transforms.Resize((28, 28)),
                                        #  transforms.ColorJitter(brightness=0.10, contrast=0.1, saturation=0.10, hue=0.1),
                                        transforms.ToTensor(),
                                        transforms.Normalize((0.1307,), (0.3081,))
                                        ])
    return train_transforms, test_transforms
    
def MNIST(train_transforms,test_transforms):
      train = datasets.MNIST('./data', train=True, download=True, transform=train_transforms)
      test = datasets.MNIST('./data', train=False, download=True, transform=test_transforms)
      return train,test

def chk_device():
  
     cuda = torch.cuda.is_available()
     print("CUDA Available?", cuda)
     torch.manual_seed(SEED)
     torch.cuda.manual_seed(SEED)
     device = torch.device("cuda:0" if cuda else "cpu")
     print(device)
     return device
def get_dataloader(dataset, batch_size=128, num_workers=4):
    # CUDA?
    cuda = torch.cuda.is_available()
    print("CUDA Available?", cuda) 
    train_transforms, test_transforms = dta_trnsf(dataset)

    if dataset == "MNIST":
        train, test = get_MNIST(train_transforms, test_transforms)
    dataloader_args = dict(shuffle=True, batch_size=batch_size, num_workers=num_workers,
                           pin_memory=True) if cuda else dict(shuffle=True, batch_size=64)
    train_loader = torch.utils.data.DataLoader(train, **dataloader_args)
    test_loader = torch.utils.data.DataLoader(test, **dataloader_args)
    return train_loader, test_loader